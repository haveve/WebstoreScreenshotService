{
  "api/WebsiteScreenshotService.Controllers.Examples.Indentity.LoginResponseExample.html": {
    "href": "api/WebsiteScreenshotService.Controllers.Examples.Indentity.LoginResponseExample.html",
    "title": "Class LoginResponseExample | Screenshot service",
    "summary": "Class LoginResponseExample Namespace WebsiteScreenshotService.Controllers.Examples.Indentity Assembly WebsiteScreenshotService.dll public class LoginResponseExample : IMultipleExamplesProvider<string> Inheritance object LoginResponseExample Implements IMultipleExamplesProvider<string> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetExamples() public IEnumerable<SwaggerExample<string>> GetExamples() Returns IEnumerable<SwaggerExample<string>>"
  },
  "api/WebsiteScreenshotService.Controllers.Examples.Indentity.MakeScreenshotResponseExample.html": {
    "href": "api/WebsiteScreenshotService.Controllers.Examples.Indentity.MakeScreenshotResponseExample.html",
    "title": "Class MakeScreenshotResponseExample | Screenshot service",
    "summary": "Class MakeScreenshotResponseExample Namespace WebsiteScreenshotService.Controllers.Examples.Indentity Assembly WebsiteScreenshotService.dll public class MakeScreenshotResponseExample : IMultipleExamplesProvider<string> Inheritance object MakeScreenshotResponseExample Implements IMultipleExamplesProvider<string> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetExamples() public IEnumerable<SwaggerExample<string>> GetExamples() Returns IEnumerable<SwaggerExample<string>>"
  },
  "api/WebsiteScreenshotService.Controllers.Examples.Indentity.RegisterResponseExample.html": {
    "href": "api/WebsiteScreenshotService.Controllers.Examples.Indentity.RegisterResponseExample.html",
    "title": "Class RegisterResponseExample | Screenshot service",
    "summary": "Class RegisterResponseExample Namespace WebsiteScreenshotService.Controllers.Examples.Indentity Assembly WebsiteScreenshotService.dll public class RegisterResponseExample : IMultipleExamplesProvider<string> Inheritance object RegisterResponseExample Implements IMultipleExamplesProvider<string> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetExamples() public IEnumerable<SwaggerExample<string>> GetExamples() Returns IEnumerable<SwaggerExample<string>>"
  },
  "api/WebsiteScreenshotService.Controllers.Examples.Indentity.html": {
    "href": "api/WebsiteScreenshotService.Controllers.Examples.Indentity.html",
    "title": "Namespace WebsiteScreenshotService.Controllers.Examples.Indentity | Screenshot service",
    "summary": "Namespace WebsiteScreenshotService.Controllers.Examples.Indentity Classes LoginResponseExample MakeScreenshotResponseExample RegisterResponseExample"
  },
  "api/WebsiteScreenshotService.Controllers.IdentityController.html": {
    "href": "api/WebsiteScreenshotService.Controllers.IdentityController.html",
    "title": "Class IdentityController | Screenshot service",
    "summary": "Class IdentityController Namespace WebsiteScreenshotService.Controllers Assembly WebsiteScreenshotService.dll [Route(\"[controller]/[action]\")] [ApiController] public class IdentityController : ControllerBase Inheritance object ControllerBase IdentityController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IdentityController(IUserRepository) public IdentityController(IUserRepository UserRepository) Parameters UserRepository IUserRepository Methods Login(LoginModel) Logs in a user using their email and password. [HttpPost] [Produces(\"application/json\", new string[] { })] [ProducesResponseType<UserModel>(200)] [ProducesResponseType(400)] [SwaggerResponseExample(400, typeof(LoginResponseExample))] public Task<IActionResult> Login(LoginModel login) Parameters login LoginModel The login details containing email and password. Returns Task<IActionResult> A UserModel with user details if the login is successful, or a BadRequest if the user does not exist. Logout() Logs out the current user by signing them out of the system. [HttpGet] [Produces(typeof(void))] public Task<IActionResult> Logout() Returns Task<IActionResult> A 200 OK response indicating successful logout. Register(RegisterModel) Registers a new user with the provided registration details. [HttpPost] [Produces(\"application/json\", new string[] { })] [ProducesResponseType<UserModel>(200)] [ProducesResponseType(400)] [SwaggerResponseExample(400, typeof(RegisterResponseExample))] public Task<IActionResult> Register(RegisterModel registerModel) Parameters registerModel RegisterModel The registration details containing email, password, etc. Returns Task<IActionResult> A 200 OK response if registration is successful, or a 400 BadRequest if a user with the same email already exists."
  },
  "api/WebsiteScreenshotService.Controllers.ScreenshotContoller.html": {
    "href": "api/WebsiteScreenshotService.Controllers.ScreenshotContoller.html",
    "title": "Class ScreenshotContoller | Screenshot service",
    "summary": "Class ScreenshotContoller Namespace WebsiteScreenshotService.Controllers Assembly WebsiteScreenshotService.dll [Authorize] [ApiController] [Route(\"[action]\")] public class ScreenshotContoller : ControllerBase Inheritance object ControllerBase ScreenshotContoller Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ScreenshotContoller(IUserRepository, IBrowserService) public ScreenshotContoller(IUserRepository UserRepository, IBrowserService BrowserService) Parameters UserRepository IUserRepository BrowserService IBrowserService Methods MakeScreenshot(ScreenshotOptionsModel) Captures a screenshot based on the specified options and returns the image file. [HttpPost] [ProducesResponseType<FileStream>(200, \"image/png\", new string[] { \"image/webp\", \"image/jpeg\" })] [ProducesResponseType<ValidationProblemDetails>(400, \"application/json\", new string[] { })] [SwaggerResponseExample(400, typeof(MakeScreenshotResponseExample))] public Task<IActionResult> MakeScreenshot(ScreenshotOptionsModel screenshotOptions) Parameters screenshotOptions ScreenshotOptionsModel The options for the screenshot such as the URL, dimensions, etc. Returns Task<IActionResult> A screenshot image file if successful, or a BadRequest with an appropriate error message if not."
  },
  "api/WebsiteScreenshotService.Controllers.html": {
    "href": "api/WebsiteScreenshotService.Controllers.html",
    "title": "Namespace WebsiteScreenshotService.Controllers | Screenshot service",
    "summary": "Namespace WebsiteScreenshotService.Controllers Classes IdentityController ScreenshotContoller"
  },
  "api/WebsiteScreenshotService.Entities.SubscriptionPlan.html": {
    "href": "api/WebsiteScreenshotService.Entities.SubscriptionPlan.html",
    "title": "Class SubscriptionPlan | Screenshot service",
    "summary": "Class SubscriptionPlan Namespace WebsiteScreenshotService.Entities Assembly WebsiteScreenshotService.dll Represents a subscription plan with a type and the number of screenshots left. public record SubscriptionPlan : IEquatable<SubscriptionPlan> Inheritance object SubscriptionPlan Implements IEquatable<SubscriptionPlan> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SubscriptionPlan(SubscriptionType, int) Represents a subscription plan with a type and the number of screenshots left. public SubscriptionPlan(SubscriptionType Type, int ScreenshotLeft) Parameters Type SubscriptionType The type of the subscription plan. ScreenshotLeft int The number of screenshots left in the subscription plan. Properties ScreenshotLeft Gets the number of screenshots left in the subscription plan. public int ScreenshotLeft { get; } Property Value int Type The type of the subscription plan. public SubscriptionType Type { get; init; } Property Value SubscriptionType Methods CanMakeScreenshot() Determines whether the user can make a screenshot based on the remaining screenshots. public bool CanMakeScreenshot() Returns bool true if the user can make a screenshot; otherwise, false. GetRegularSubscriptionPlan() Gets a regular subscription plan with a default number of screenshots. public static SubscriptionPlan GetRegularSubscriptionPlan() Returns SubscriptionPlan A regular subscription plan. ScreenshotWasMade() Decrements the number of screenshots left by one. public void ScreenshotWasMade()"
  },
  "api/WebsiteScreenshotService.Entities.SubscriptionType.html": {
    "href": "api/WebsiteScreenshotService.Entities.SubscriptionType.html",
    "title": "Enum SubscriptionType | Screenshot service",
    "summary": "Enum SubscriptionType Namespace WebsiteScreenshotService.Entities Assembly WebsiteScreenshotService.dll Defines the types of subscription plans. public enum SubscriptionType Fields Regular = 0 Represents a regular subscription plan."
  },
  "api/WebsiteScreenshotService.Entities.User.html": {
    "href": "api/WebsiteScreenshotService.Entities.User.html",
    "title": "Class User | Screenshot service",
    "summary": "Class User Namespace WebsiteScreenshotService.Entities Assembly WebsiteScreenshotService.dll Represents a user entity with basic user information and subscription plan details. public record User : IEquatable<User> Inheritance object User Implements IEquatable<User> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods UserExtensions.GetUserClaims(User) Constructors User(Guid, string, string, string, string, SubscriptionPlan) Represents a user entity with basic user information and subscription plan details. public User(Guid Id, string Name, string Surname, string Email, string Password, SubscriptionPlan SubscriptionPlan) Parameters Id Guid The unique identifier of the user. Name string The first name of the user. Surname string The surname of the user. Email string The email address of the user. Password string The password of the user. SubscriptionPlan SubscriptionPlan The subscription plan associated with the user. Properties Email The email address of the user. public string Email { get; init; } Property Value string Id The unique identifier of the user. public Guid Id { get; init; } Property Value Guid Name The first name of the user. public string Name { get; init; } Property Value string Password The password of the user. public string Password { get; init; } Property Value string SubscriptionPlan The subscription plan associated with the user. public SubscriptionPlan SubscriptionPlan { get; init; } Property Value SubscriptionPlan Surname The surname of the user. public string Surname { get; init; } Property Value string"
  },
  "api/WebsiteScreenshotService.Entities.html": {
    "href": "api/WebsiteScreenshotService.Entities.html",
    "title": "Namespace WebsiteScreenshotService.Entities | Screenshot service",
    "summary": "Namespace WebsiteScreenshotService.Entities Classes SubscriptionPlan Represents a subscription plan with a type and the number of screenshots left. User Represents a user entity with basic user information and subscription plan details. Enums SubscriptionType Defines the types of subscription plans."
  },
  "api/WebsiteScreenshotService.Extensions.PrincipalExtensions.html": {
    "href": "api/WebsiteScreenshotService.Extensions.PrincipalExtensions.html",
    "title": "Class PrincipalExtensions | Screenshot service",
    "summary": "Class PrincipalExtensions Namespace WebsiteScreenshotService.Extensions Assembly WebsiteScreenshotService.dll Provides extension methods for the ClaimsPrincipal and HttpContext classes. public static class PrincipalExtensions Inheritance object PrincipalExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetClaimValue(ClaimsPrincipal, string) Gets the value of a specific claim from the current principal. public static string? GetClaimValue(this ClaimsPrincipal currentPrincipal, string key) Parameters currentPrincipal ClaimsPrincipal The current claims principal. key string The key of the claim to retrieve. Returns string The value of the claim if found; otherwise, null. GetUserEmail(ClaimsPrincipal) Gets the user email from the current principal's claims. public static string? GetUserEmail(this ClaimsPrincipal currentPrincipal) Parameters currentPrincipal ClaimsPrincipal The current claims principal. Returns string The user email if found; otherwise, null. GetUserId(ClaimsPrincipal) Gets the user ID from the current principal's claims. public static Guid? GetUserId(this ClaimsPrincipal currentPrincipal) Parameters currentPrincipal ClaimsPrincipal The current claims principal. Returns Guid? The user ID if found and valid; otherwise, null. GetUserName(ClaimsPrincipal) Gets the user name from the current principal's claims. public static string? GetUserName(this ClaimsPrincipal currentPrincipal) Parameters currentPrincipal ClaimsPrincipal The current claims principal. Returns string The user name if found; otherwise, null. UpdateClaim(HttpContext, string, string) Updates or adds a claim in the current user's identity. public static void UpdateClaim(this HttpContext httpContext, string key, string value) Parameters httpContext HttpContext The current HTTP context. key string The key of the claim to update or add. value string The value of the claim to update or add."
  },
  "api/WebsiteScreenshotService.Extensions.UserExtensions.html": {
    "href": "api/WebsiteScreenshotService.Extensions.UserExtensions.html",
    "title": "Class UserExtensions | Screenshot service",
    "summary": "Class UserExtensions Namespace WebsiteScreenshotService.Extensions Assembly WebsiteScreenshotService.dll Provides extension methods for the User class. public static class UserExtensions Inheritance object UserExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetUserClaims(User) Gets a list of claims for the specified user. public static List<Claim> GetUserClaims(this User user) Parameters user User The user to get claims for. Returns List<Claim> A list of Claim objects representing the user's claims."
  },
  "api/WebsiteScreenshotService.Extensions.html": {
    "href": "api/WebsiteScreenshotService.Extensions.html",
    "title": "Namespace WebsiteScreenshotService.Extensions | Screenshot service",
    "summary": "Namespace WebsiteScreenshotService.Extensions Classes PrincipalExtensions Provides extension methods for the ClaimsPrincipal and HttpContext classes. UserExtensions Provides extension methods for the User class."
  },
  "api/WebsiteScreenshotService.Model.LoginModel.html": {
    "href": "api/WebsiteScreenshotService.Model.LoginModel.html",
    "title": "Class LoginModel | Screenshot service",
    "summary": "Class LoginModel Namespace WebsiteScreenshotService.Model Assembly WebsiteScreenshotService.dll Represents the model for user login. public class LoginModel Inheritance object LoginModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email Gets or sets the email address of the user. [EmailAddress] [Required] public string Email { get; set; } Property Value string Password Gets or sets the password of the user. [Required] public string Password { get; set; } Property Value string"
  },
  "api/WebsiteScreenshotService.Model.RegisterModel.html": {
    "href": "api/WebsiteScreenshotService.Model.RegisterModel.html",
    "title": "Class RegisterModel | Screenshot service",
    "summary": "Class RegisterModel Namespace WebsiteScreenshotService.Model Assembly WebsiteScreenshotService.dll Represents the model for user registration. public class RegisterModel Inheritance object RegisterModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email Gets or sets the email address of the user. [EmailAddress] [Required] public string Email { get; set; } Property Value string Name Gets or sets the first name of the user. [Required] public string Name { get; set; } Property Value string Password Gets or sets the password of the user. [Required] public string Password { get; set; } Property Value string Surname Gets or sets the surname of the user. [Required] public string Surname { get; set; } Property Value string Methods ToEntity() Converts the RegisterModel to a User entity. public User ToEntity() Returns User A new User entity with the registration details."
  },
  "api/WebsiteScreenshotService.Model.ScreenshotOptionsModel.html": {
    "href": "api/WebsiteScreenshotService.Model.ScreenshotOptionsModel.html",
    "title": "Class ScreenshotOptionsModel | Screenshot service",
    "summary": "Class ScreenshotOptionsModel Namespace WebsiteScreenshotService.Model Assembly WebsiteScreenshotService.dll Represents the options for taking a screenshot. public class ScreenshotOptionsModel Inheritance object ScreenshotOptionsModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Clip Gets or sets the clipping region of the screenshot. Cannot be specified with FullScreen. [OnlyOneSpecified(\"FullSreen\", false)] public Clip? Clip { get; set; } Property Value Clip FullSreen Gets or sets a value indicating whether to capture the full screen. Cannot be specified with Clip. [OnlyOneSpecified(\"Clip\", false)] public bool? FullSreen { get; set; } Property Value bool? Quality Gets or sets the quality of the screenshot if the type is JPEG. Ignored for PNG. [Range(0, 100)] [EmptyIf<ScreenshotType>(\"ScreenshotType\", ScreenshotType.Png)] public int? Quality { get; set; } Property Value int? ScreenshotType Gets or sets the type of screenshot to capture (e.g., PNG, JPEG). public ScreenshotType ScreenshotType { get; set; } Property Value ScreenshotType Url Gets or sets the URL of the webpage to capture. [Url] [Required] public string Url { get; set; } Property Value string"
  },
  "api/WebsiteScreenshotService.Model.UserModel.html": {
    "href": "api/WebsiteScreenshotService.Model.UserModel.html",
    "title": "Class UserModel | Screenshot service",
    "summary": "Class UserModel Namespace WebsiteScreenshotService.Model Assembly WebsiteScreenshotService.dll Represents a user model with basic user information and subscription plan details. public record UserModel : IEquatable<UserModel> Inheritance object UserModel Implements IEquatable<UserModel> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserModel(string, string, string, SubscriptionPlan) Represents a user model with basic user information and subscription plan details. public UserModel(string Name, string Surname, string Email, SubscriptionPlan SubscriptionPlan) Parameters Name string The first name of the user. Surname string The surname of the user. Email string The email address of the user. SubscriptionPlan SubscriptionPlan The subscription plan associated with the user. Properties Email The email address of the user. public string Email { get; init; } Property Value string Name The first name of the user. public string Name { get; init; } Property Value string SubscriptionPlan The subscription plan associated with the user. public SubscriptionPlan SubscriptionPlan { get; init; } Property Value SubscriptionPlan Surname The surname of the user. public string Surname { get; init; } Property Value string Methods GetModel(User) Creates a UserModel instance from a User entity. public static UserModel GetModel(User user) Parameters user User The user entity to convert. Returns UserModel A new UserModel instance."
  },
  "api/WebsiteScreenshotService.Model.html": {
    "href": "api/WebsiteScreenshotService.Model.html",
    "title": "Namespace WebsiteScreenshotService.Model | Screenshot service",
    "summary": "Namespace WebsiteScreenshotService.Model Classes LoginModel Represents the model for user login. RegisterModel Represents the model for user registration. ScreenshotOptionsModel Represents the options for taking a screenshot. UserModel Represents a user model with basic user information and subscription plan details."
  },
  "api/WebsiteScreenshotService.Repositories.IUserRepository.html": {
    "href": "api/WebsiteScreenshotService.Repositories.IUserRepository.html",
    "title": "Interface IUserRepository | Screenshot service",
    "summary": "Interface IUserRepository Namespace WebsiteScreenshotService.Repositories Assembly WebsiteScreenshotService.dll Defines the contract for user repository operations, including user retrieval, creation, and subscription management. public interface IUserRepository Methods CreateUser(User) Creates a new user. Task<User?> CreateUser(User user) Parameters user User The user to create. Returns Task<User> A task that represents the asynchronous operation. The task result contains the created user. GetUserByEmailAndPasswordAsync(string, string) Retrieves a user by their email and password. Task<User?> GetUserByEmailAndPasswordAsync(string email, string password) Parameters email string The email of the user. password string The password of the user. Returns Task<User> A task that represents the asynchronous operation. The task result contains the user if found; otherwise, null. GetUserSubscription(Guid) Retrieves the subscription plan of a user by their ID. Task<SubscriptionPlan?> GetUserSubscription(Guid userId) Parameters userId Guid The ID of the user. Returns Task<SubscriptionPlan> A task that represents the asynchronous operation. The task result contains the subscription plan if found; otherwise, null. ScreenshotWasMade(Guid) Updates the subscription plan when a screenshot is made by the user. Task<SubscriptionPlan?> ScreenshotWasMade(Guid userId) Parameters userId Guid The ID of the user. Returns Task<SubscriptionPlan> A task that represents the asynchronous operation. The task result contains the updated subscription plan if found; otherwise, null."
  },
  "api/WebsiteScreenshotService.Repositories.InMemoryUserRepository.html": {
    "href": "api/WebsiteScreenshotService.Repositories.InMemoryUserRepository.html",
    "title": "Class InMemoryUserRepository | Screenshot service",
    "summary": "Class InMemoryUserRepository Namespace WebsiteScreenshotService.Repositories Assembly WebsiteScreenshotService.dll Provides an in-memory implementation of the IUserRepository interface for managing users and their subscriptions. public class InMemoryUserRepository : IUserRepository Inheritance object InMemoryUserRepository Implements IUserRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateUser(User) Creates a new user and adds them to the in-memory collection. public Task<User?> CreateUser(User user) Parameters user User The user to create. Returns Task<User> A task that represents the asynchronous operation. The task result contains the created user if successful; otherwise, null. GetUserByEmailAndPasswordAsync(string, string) Retrieves a user by their email and password. public Task<User?> GetUserByEmailAndPasswordAsync(string email, string password) Parameters email string The email of the user. password string The password of the user. Returns Task<User> A task that represents the asynchronous operation. The task result contains the user if found; otherwise, null. GetUserSubscription(Guid) Retrieves the subscription plan of a user by their ID. public Task<SubscriptionPlan?> GetUserSubscription(Guid userId) Parameters userId Guid The ID of the user. Returns Task<SubscriptionPlan> A task that represents the asynchronous operation. The task result contains the subscription plan if found; otherwise, null. ScreenshotWasMade(Guid) Updates the subscription plan when a screenshot is made by the user. public Task<SubscriptionPlan?> ScreenshotWasMade(Guid userId) Parameters userId Guid The ID of the user. Returns Task<SubscriptionPlan> A task that represents the asynchronous operation. The task result contains the updated subscription plan if found; otherwise, null."
  },
  "api/WebsiteScreenshotService.Repositories.html": {
    "href": "api/WebsiteScreenshotService.Repositories.html",
    "title": "Namespace WebsiteScreenshotService.Repositories | Screenshot service",
    "summary": "Namespace WebsiteScreenshotService.Repositories Classes InMemoryUserRepository Provides an in-memory implementation of the IUserRepository interface for managing users and their subscriptions. Interfaces IUserRepository Defines the contract for user repository operations, including user retrieval, creation, and subscription management."
  },
  "api/WebsiteScreenshotService.ServiceExtensions.ControllerSevicesExtension.html": {
    "href": "api/WebsiteScreenshotService.ServiceExtensions.ControllerSevicesExtension.html",
    "title": "Class ControllerSevicesExtension | Screenshot service",
    "summary": "Class ControllerSevicesExtension Namespace WebsiteScreenshotService.ServiceExtensions Assembly WebsiteScreenshotService.dll public static class ControllerSevicesExtension Inheritance object ControllerSevicesExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddControllerServices(IServiceCollection) public static IMvcBuilder AddControllerServices(this IServiceCollection services) Parameters services IServiceCollection Returns IMvcBuilder CreateValidationProblemDetails(ModelStateDictionary, string) public static ValidationProblemDetails CreateValidationProblemDetails(ModelStateDictionary modelState, string path) Parameters modelState ModelStateDictionary path string Returns ValidationProblemDetails"
  },
  "api/WebsiteScreenshotService.ServiceExtensions.SwaggerServicesExtension.html": {
    "href": "api/WebsiteScreenshotService.ServiceExtensions.SwaggerServicesExtension.html",
    "title": "Class SwaggerServicesExtension | Screenshot service",
    "summary": "Class SwaggerServicesExtension Namespace WebsiteScreenshotService.ServiceExtensions Assembly WebsiteScreenshotService.dll public static class SwaggerServicesExtension Inheritance object SwaggerServicesExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddSwaggerServices(IServiceCollection) public static IServiceCollection AddSwaggerServices(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection"
  },
  "api/WebsiteScreenshotService.ServiceExtensions.html": {
    "href": "api/WebsiteScreenshotService.ServiceExtensions.html",
    "title": "Namespace WebsiteScreenshotService.ServiceExtensions | Screenshot service",
    "summary": "Namespace WebsiteScreenshotService.ServiceExtensions Classes ControllerSevicesExtension SwaggerServicesExtension"
  },
  "api/WebsiteScreenshotService.Services.BrowserService.html": {
    "href": "api/WebsiteScreenshotService.Services.BrowserService.html",
    "title": "Class BrowserService | Screenshot service",
    "summary": "Class BrowserService Namespace WebsiteScreenshotService.Services Assembly WebsiteScreenshotService.dll Provides services for browser operations, including taking screenshots. public class BrowserService : IBrowserService Inheritance object BrowserService Implements IBrowserService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods MakeScreenshotAsync(ScreenshotOptionsModel) Takes a screenshot of a webpage based on the specified options. public Task<Stream> MakeScreenshotAsync(ScreenshotOptionsModel screenshotOptionsModel) Parameters screenshotOptionsModel ScreenshotOptionsModel The options for taking the screenshot. Returns Task<Stream> A task that represents the asynchronous operation. The task result contains the screenshot as a stream."
  },
  "api/WebsiteScreenshotService.Services.IBrowserService.html": {
    "href": "api/WebsiteScreenshotService.Services.IBrowserService.html",
    "title": "Interface IBrowserService | Screenshot service",
    "summary": "Interface IBrowserService Namespace WebsiteScreenshotService.Services Assembly WebsiteScreenshotService.dll Defines the contract for browser services, including operations for taking screenshots. public interface IBrowserService Methods MakeScreenshotAsync(ScreenshotOptionsModel) Takes a screenshot of a webpage based on the specified options. Task<Stream> MakeScreenshotAsync(ScreenshotOptionsModel screenshotOptionsModel) Parameters screenshotOptionsModel ScreenshotOptionsModel The options for taking the screenshot. Returns Task<Stream> A task that represents the asynchronous operation. The task result contains the screenshot as a stream."
  },
  "api/WebsiteScreenshotService.Services.html": {
    "href": "api/WebsiteScreenshotService.Services.html",
    "title": "Namespace WebsiteScreenshotService.Services | Screenshot service",
    "summary": "Namespace WebsiteScreenshotService.Services Classes BrowserService Provides services for browser operations, including taking screenshots. Interfaces IBrowserService Defines the contract for browser services, including operations for taking screenshots."
  },
  "api/WebsiteScreenshotService.Utils.Attributes.EmptyIfAttribute-1.html": {
    "href": "api/WebsiteScreenshotService.Utils.Attributes.EmptyIfAttribute-1.html",
    "title": "Class EmptyIfAttribute<T> | Screenshot service",
    "summary": "Class EmptyIfAttribute<T> Namespace WebsiteScreenshotService.Utils.Attributes Assembly WebsiteScreenshotService.dll Validation attribute that enforces a property to be empty if another property has a specified value. public class EmptyIfAttribute<T> : ValidationAttribute Type Parameters T The type of the other property's value. Inheritance object Attribute ValidationAttribute EmptyIfAttribute<T> Inherited Members ValidationAttribute.FormatErrorMessage(string) ValidationAttribute.GetValidationResult(object, ValidationContext) ValidationAttribute.IsValid(object) ValidationAttribute.Validate(object, ValidationContext) ValidationAttribute.Validate(object, string) ValidationAttribute.ErrorMessage ValidationAttribute.ErrorMessageResourceName ValidationAttribute.ErrorMessageResourceType ValidationAttribute.ErrorMessageString ValidationAttribute.RequiresValidationContext Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EmptyIfAttribute(string, T) Validation attribute that enforces a property to be empty if another property has a specified value. public EmptyIfAttribute(string OtherPropertyName, T OtherValue) Parameters OtherPropertyName string The name of the other property to check. OtherValue T The value of the other property that triggers the validation. Methods IsValid(object?, ValidationContext) Validates the specified value with respect to the current validation attribute. protected override ValidationResult? IsValid(object? value, ValidationContext validationContext) Parameters value object The value of the property being validated. validationContext ValidationContext The context information about the validation operation. Returns ValidationResult A ValidationResult that indicates whether the value is valid."
  },
  "api/WebsiteScreenshotService.Utils.Attributes.OnlyOneSpecifiedAttribute.html": {
    "href": "api/WebsiteScreenshotService.Utils.Attributes.OnlyOneSpecifiedAttribute.html",
    "title": "Class OnlyOneSpecifiedAttribute | Screenshot service",
    "summary": "Class OnlyOneSpecifiedAttribute Namespace WebsiteScreenshotService.Utils.Attributes Assembly WebsiteScreenshotService.dll Validation attribute that ensures only one of the specified properties is set. public class OnlyOneSpecifiedAttribute : ValidationAttribute Inheritance object Attribute ValidationAttribute OnlyOneSpecifiedAttribute Inherited Members ValidationAttribute.FormatErrorMessage(string) ValidationAttribute.GetValidationResult(object, ValidationContext) ValidationAttribute.IsValid(object) ValidationAttribute.Validate(object, ValidationContext) ValidationAttribute.Validate(object, string) ValidationAttribute.ErrorMessage ValidationAttribute.ErrorMessageResourceName ValidationAttribute.ErrorMessageResourceType ValidationAttribute.ErrorMessageString ValidationAttribute.RequiresValidationContext Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OnlyOneSpecifiedAttribute(string, bool) Validation attribute that ensures only one of the specified properties is set. public OnlyOneSpecifiedAttribute(string OtherPropertyName, bool RequiredIfOtherEmpty = false) Parameters OtherPropertyName string The name of the other property to check. RequiredIfOtherEmpty bool Indicates whether the current property is required if the other property is empty. Methods IsValid(object?, ValidationContext) Validates the specified value with respect to the current validation attribute. protected override ValidationResult? IsValid(object? value, ValidationContext validationContext) Parameters value object The value of the property being validated. validationContext ValidationContext The context information about the validation operation. Returns ValidationResult A ValidationResult that indicates whether the value is valid."
  },
  "api/WebsiteScreenshotService.Utils.Attributes.ValidationAttributeHelper.html": {
    "href": "api/WebsiteScreenshotService.Utils.Attributes.ValidationAttributeHelper.html",
    "title": "Class ValidationAttributeHelper | Screenshot service",
    "summary": "Class ValidationAttributeHelper Namespace WebsiteScreenshotService.Utils.Attributes Assembly WebsiteScreenshotService.dll Provides helper methods for validation attributes. public class ValidationAttributeHelper Inheritance object ValidationAttributeHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsUnset(object?) Determines whether the specified value is unset (null, default, or empty string). public static bool IsUnset(object? value) Parameters value object The value to check. Returns bool true if the value is unset; otherwise, false."
  },
  "api/WebsiteScreenshotService.Utils.Attributes.html": {
    "href": "api/WebsiteScreenshotService.Utils.Attributes.html",
    "title": "Namespace WebsiteScreenshotService.Utils.Attributes | Screenshot service",
    "summary": "Namespace WebsiteScreenshotService.Utils.Attributes Classes EmptyIfAttribute<T> Validation attribute that enforces a property to be empty if another property has a specified value. OnlyOneSpecifiedAttribute Validation attribute that ensures only one of the specified properties is set. ValidationAttributeHelper Provides helper methods for validation attributes."
  },
  "api/WebsiteScreenshotService.Utils.LazyAsync-1.html": {
    "href": "api/WebsiteScreenshotService.Utils.LazyAsync-1.html",
    "title": "Class LazyAsync<T> | Screenshot service",
    "summary": "Class LazyAsync<T> Namespace WebsiteScreenshotService.Utils Assembly WebsiteScreenshotService.dll Provides a mechanism for lazy asynchronous initialization of a value. public class LazyAsync<T> Type Parameters T The type of the value to be initialized. Inheritance object LazyAsync<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LazyAsync(Func<Task<T>>) Provides a mechanism for lazy asynchronous initialization of a value. public LazyAsync(Func<Task<T>> Factory) Parameters Factory Func<Task<T>> Methods GetValueAsync() Gets the value asynchronously, initializing it if necessary. public ValueTask<T> GetValueAsync() Returns ValueTask<T> A task that represents the asynchronous operation. The task result contains the initialized value."
  },
  "api/WebsiteScreenshotService.Utils.html": {
    "href": "api/WebsiteScreenshotService.Utils.html",
    "title": "Namespace WebsiteScreenshotService.Utils | Screenshot service",
    "summary": "Namespace WebsiteScreenshotService.Utils Classes LazyAsync<T> Provides a mechanism for lazy asynchronous initialization of a value."
  },
  "docs/code-practices.html": {
    "href": "docs/code-practices.html",
    "title": "Code Practices for Website Screenshot Service | Screenshot service",
    "summary": "Code Practices for Website Screenshot Service This document outlines the best practices for writing and maintaining code in the Website Screenshot Service project. Adhering to these practices ensures that the codebase remains clean, maintainable, and scalable. 1. Naming Conventions Classes and Interfaces: Use PascalCase for class and interface names. Prefix interface names with \"I\". namespace WebsiteScreenshotService.Services { /// <summary> /// Interface for user-related operations. /// </summary> public interface IUserService { // Define user service methods here } /// <summary> /// Service for handling user-related operations. /// </summary> public class UserService : IUserService { // Implement user service methods here } } Methods: Use PascalCase for method names. namespace WebsiteScreenshotService.Services { /// <summary> /// Interface for user-related operations. /// </summary> public interface IUserService { /// <summary> /// Retrieves a user. /// </summary> void GetUser(); } /// <summary> /// Service for handling user-related operations. /// </summary> public class UserService : IUserService { /// <summary> /// Retrieves a user. /// </summary> public void GetUser() { // Implement logic to get user here } } } Variables and Parameters: Use camelCase for variable and parameter names. namespace WebsiteScreenshotService.Services { /// <summary> /// Interface for user-related operations. /// </summary> public interface IUserService { /// <summary> /// Gets or sets the user ID. /// </summary> /// <exception cref=\"ArgumentOutOfRangeException\"> /// Thrown when the user ID is less than or equal to zero. /// </exception> int UserId { get; set; } } /// <summary> /// Service for handling user-related operations. /// </summary> public class UserService : IUserService { private int userId; /// <summary> /// Gets or sets the user ID. /// </summary> /// <exception cref=\"ArgumentOutOfRangeException\"> /// Thrown when setting a user ID less than or equal to zero. /// </exception> public int UserId { get { if (userId <= 0) { throw new InvalidOperationException(\"User ID has not been set or is invalid.\"); } return userId; } set { if (value <= 0) { throw new ArgumentOutOfRangeException(nameof(value), \"User ID must be greater than zero.\"); } userId = value; } } } } Constants: Use PascalCase for constant names. namespace WebsiteScreenshotService.Constants { /// <summary> /// Contains constants related to user operations. /// </summary> public static class UserConstants { /// <summary> /// The maximum number of users allowed. /// </summary> public const int MaxUsers = 100; /// <summary> /// The minimum allowed user ID value. /// </summary> public const int MinUserId = 1; // Add more user-related constants here as needed } } 2. Code Organization Project Structure: Organize the project into logical folders such as Controllers, Models, Services, Repositories, Extensions, Utils, and Entities. � Controllers � Models � Services � Repositories � Extensions � Utils � Entities Single Responsibility Principle: Ensure that each class and method has a single responsibility. This makes the code easier to understand and maintain. 3. Asynchronous Programming Async/Await: Use asynchronous programming for I/O-bound operations to improve performance and responsiveness. namespace WebsiteScreenshotService.Services { /// <summary> /// Interface for user-related operations. /// </summary> public interface IUserService { /// <summary> /// Retrieves a user asynchronously by their ID. /// </summary> /// <param name=\"userId\">The ID of the user to retrieve.</param> /// <returns>A task that represents the asynchronous operation. /// The task result contains the user data.</returns> Task<User> GetUserAsync(int userId); } /// <summary> /// Service for handling user-related operations. /// </summary> public class UserService : IUserService { private readonly IUserRepository _userRepository; /// <summary> /// Initializes a new instance of the <see cref=\"UserService\"/> class. /// </summary> /// <param name=\"userRepository\">The user repository.</param> public UserService(IUserRepository userRepository) { _userRepository = userRepository; } /// <summary> /// Retrieves a user asynchronously by their ID. /// </summary> /// <param name=\"userId\">The ID of the user to retrieve.</param> /// <returns>A task that represents the asynchronous operation. /// The task result contains the user data.</returns> /// <exception cref=\"ArgumentException\">Thrown when <paramref name=\"userId\"/> is less than or equal to zero.</exception> public async Task<User> GetUserAsync(int userId) { if (userId <= 0) { throw new ArgumentException(\"User ID must be greater than zero.\", nameof(userId)); } var user = await _userRepository.GetUserByIdAsync(userId); if (user == null) { throw new InvalidOperationException($\"User with ID {userId} not found.\"); } return user; } } } 4. Dependency Injection Constructor Injection: Use constructor injection to inject dependencies. This promotes loose coupling and makes the code more testable. namespace WebsiteScreenshotService.Services { /// <summary> /// Service for handling user-related operations. /// </summary> public class UserService { private readonly IUserRepository _userRepository; /// <summary> /// Initializes a new instance of the <see cref=\"UserService\"/> class. /// </summary> /// <param name=\"userRepository\">The user repository.</param> public UserService(IUserRepository userRepository) { _userRepository = userRepository; } // Add user-related methods here } } 5. Error Handling Exception Handling: Use try-catch blocks to handle exceptions gracefully. Log exceptions for debugging purposes. namespace WebsiteScreenshotService.Services { /// <summary> /// Service for handling user-related operations. /// </summary> public class UserService { private readonly IUserRepository _userRepository; private readonly ILogger<UserService> _logger; /// <summary> /// Initializes a new instance of the <see cref=\"UserService\"/> class. /// </summary> /// <param name=\"userRepository\">The user repository.</param> /// <param name=\"logger\">The logger instance.</param> public UserService(IUserRepository userRepository, ILogger<UserService> logger) { _userRepository = userRepository; _logger = logger; } /// <summary> /// Retrieves a user asynchronously by their ID. /// </summary> /// <param name=\"userId\">The ID of the user to retrieve.</param> /// <returns>A task that represents the asynchronous operation. /// The task result contains the user data.</returns> /// <exception cref=\"InvalidOperationException\"> /// Thrown when an error occurs while fetching the user. /// </exception> public async Task<User> GetUserAsync(int userId) { try { return await _userRepository.GetUserByIdAsync(userId); } catch (Exception ex) { _logger.LogError(ex, \"Error fetching user with ID {UserId}\", userId); throw new InvalidOperationException(\"An error occurred while fetching the user.\", ex); } } } } 6. Validation Data Annotations: Use data annotations to validate models. using System.ComponentModel.DataAnnotations; namespace WebsiteScreenshotService.Models { /// <summary> /// Model for user registration. /// </summary> public class RegisterModel { /// <summary> /// Gets or sets the user's email address. /// </summary> [Required(ErrorMessage = \"Email is required.\")] [EmailAddress(ErrorMessage = \"Invalid email address format.\")] public string Email { get; set; } /// <summary> /// Gets or sets the user's password. /// </summary> [Required(ErrorMessage = \"Password is required.\")] public string Password { get; set; } } } 7. Documentation XML Comments: Use XML comments to document classes, methods, and properties. This helps other developers understand the code. /// <summary> /// Represents a user registration model. /// </summary> public class RegisterModel { /// <summary> /// Gets or sets the user's email address. /// </summary> /// <remarks> /// The email must be in a valid format. /// </remarks> [Required(ErrorMessage = \"Email is required.\")] [EmailAddress(ErrorMessage = \"Invalid email address format.\")] public string Email { get; set; } /// <summary> /// Gets or sets the user's password. /// </summary> [Required(ErrorMessage = \"Password is required.\")] public string Password { get; set; } } /// <summary> /// Service for user management. /// </summary> public class UserService { /// <summary> /// Registers a new user asynchronously. /// </summary> /// <param name=\"model\">The registration model containing user data.</param> /// <returns>A task representing the asynchronous operation.</returns> /// <exception cref=\"ArgumentNullException\">Thrown when <paramref name=\"model\"/> is null.</exception> public async Task RegisterUserAsync(RegisterModel model) { if (model == null) throw new ArgumentNullException(nameof(model)); // Registration logic here } } 8. Code Reviews Peer Reviews: Conduct code reviews to ensure code quality and share knowledge among team members. Use tools like GitHub pull requests for code reviews. Conclusion By following these best practices, you can ensure that the Website Screenshot Service project remains clean, maintainable, and scalable. Consistent coding practices help improve collaboration and make it easier to onboard new developers to the project."
  },
  "docs/create-a-new-endpoint.html": {
    "href": "docs/create-a-new-endpoint.html",
    "title": "How to Add a New Endpoint | Screenshot service",
    "summary": "How to Add a New Endpoint This guide provides step-by-step instructions on how to add a new endpoint to the Website Screenshot Service. Step 1: Create a New Controller (if needed) If your new endpoint belongs to a new category of functionality, you may need to create a new controller. Otherwise, you can add the endpoint to an existing controller. Create a new controller file in the Controllers directory. For example, NewFeatureController.cs. 1. using Microsoft.AspNetCore.Mvc; namespace WebsiteScreenshotService.Controllers { /// <summary> /// Controller for handling new feature endpoints. /// </summary> [ApiController] [Route(\"api/[controller]\")] public class NewFeatureController : ControllerBase { // Add your endpoint methods here } } Step 2: Define the Endpoint Method Add a new method to your controller to handle the endpoint. Use attributes to specify the HTTP method and route. using Microsoft.AspNetCore.Mvc; namespace WebsiteScreenshotService.Controllers { /// <summary> /// Controller for handling new feature endpoints. /// </summary> [ApiController] [Route(\"api/[controller]\")] public class NewFeatureController : ControllerBase { /// <summary> /// Gets the new feature. /// </summary> /// <returns>A response with the new feature.</returns> [HttpGet(\"new-endpoint\")] public IActionResult GetNewFeature() { // Implement your logic here return Ok(\"New feature response\"); } } } Step 3: Add Any Required Models If your endpoint requires input or output models, define them in the Model directory. namespace WebsiteScreenshotService.Model { /// <summary> /// Model for the new feature. /// </summary> public class NewFeatureModel { /// <summary> /// Gets or sets the first property. /// </summary> public string Property1 { get; set; } /// <summary> /// Gets or sets the second property. /// </summary> public int Property2 { get; set; } } } Step 4: Implement Business Logic in Services If your endpoint requires business logic, implement it in a service class in the Services directory. Define an interface for the service if needed. namespace WebsiteScreenshotService.Services { /// <summary> /// Interface for the new feature service. /// </summary> public interface INewFeatureService { /// <summary> /// Gets the new feature asynchronously. /// </summary> /// <returns> /// A task that represents the asynchronous operation. /// The task result contains the new feature response. /// </returns> Task<string> GetNewFeatureAsync(); } /// <summary> /// Service for handling new feature business logic. /// </summary> public class NewFeatureService : INewFeatureService { /// <summary> /// Gets the new feature asynchronously. /// </summary> /// <returns> /// A task that represents the asynchronous operation. /// The task result contains the new feature response. /// </returns> public async Task<string> GetNewFeatureAsync() { // Implement your business logic here return await Task.FromResult(\"New feature response\"); } } } Step 5: Register the Service Register your new service in the ControllerServicesExtension.cs file. using Microsoft.Extensions.DependencyInjection; using WebsiteScreenshotService.Services; namespace WebsiteScreenshotService.ServiceExtensions { /// <summary> /// Extension methods for configuring controller services. /// </summary> public static class ControllerServicesExtension { /// <summary> /// Adds controller services to the specified service collection. /// </summary> /// <param name=\"services\">The service collection to add services to.</param> public static void AddControllerServices(this IServiceCollection services) { // Register your new service here services.AddScoped<INewFeatureService, NewFeatureService>(); } } } Step 6: Update the Controller to Use the Service Inject the service into your controller and use it in your endpoint method. using Microsoft.AspNetCore.Mvc; using WebsiteScreenshotService.Services; namespace WebsiteScreenshotService.Controllers { /// <summary> /// Controller for handling new feature endpoints. /// </summary> [ApiController] [Route(\"api/[controller]\")] public class NewFeatureController : ControllerBase { private readonly INewFeatureService _newFeatureService; /// <summary> /// Initializes a new instance of the <see cref=\"NewFeatureController\"/> class. /// </summary> /// <param name=\"newFeatureService\">The new feature service.</param> public NewFeatureController(INewFeatureService newFeatureService) { _newFeatureService = newFeatureService; } /// <summary> /// Gets the new feature. /// </summary> /// <returns>A response with the new feature.</returns> [HttpGet(\"new-endpoint\")] public async Task<IActionResult> GetNewFeature() { var result = await _newFeatureService.GetNewFeatureAsync(); return Ok(result); } } } Step 7: Test the Endpoint Run the application(see distribution) Open your web browser and navigate to http://localhost:5000/swagger (or the appropriate URL for your application). This will open the Swagger UI. Conclusion You have successfully added a new endpoint to the Website Screenshot Service. Follow these steps for any additional endpoints you need to create."
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to the Website Screenshot Service Documentation | Screenshot service",
    "summary": "Welcome to the Website Screenshot Service Documentation This documentation provides information on how to develop the Website Screenshot Service. It includes details on the available features, setup instructions, project organization, code writing practices, and distribution methods. Features Capture screenshots in PNG and JPEG formats. Specify the quality of JPEG screenshots. Capture full-page screenshots or specific regions. Manage user subscriptions and track usage. Getting Started Add a new endpoint: create a new endpoint Project Organization The project is organized into several key components (see Documentation for more information): Controllers: Handle HTTP requests and responses. Model: Defines data models used in the application. Services: Contains business logic and operations. Extensions: Provides extension methods. Utils: Contains utility classes and validation attributes. Repositories: Manages data access and storage. Entities: Defines entities representing data. ServiceExtensions: Contains service configuration extensions. Code Writing Practices Details about core practices you can find in Code Practices Asynchronous Methods: Use async methods for better performance. Extension Methods: Use extension methods for cleaner code. Validation Attributes: Use custom validation attributes for data validation. Interfaces: Use interfaces for flexibility and testability. Distribution To get started with the Website Screenshot Service, follow these steps: Clone the repository: git clone https://github.com/your-repo/website-screenshot-service.git Navigate to the project directory: cd website-screenshot-service Install dependencies: dotnet restore Run the application: dotnet run To publish the project, use the following command: This will create a build of the project in the ./publish directory, ready for deployment. License This project is licensed under the MIT License. See the LICENSE file for details."
  }
}